---
- name: "Fail if image is not found"
  ansible.builtin.assert:
    that:
      - "{{ azure_instance_os in azure_images }}"
    success_msg: "Valid image provided."
    fail_msg: "Invalid image provided. Bailing out."

- name: "Lookup image properties"
  ansible.builtin.set_fact:
    selected_image: "{{ azure_images[azure_instance_os] }}"

- name: "Debug output"
  ansible.builtin.debug:
    var: selected_image

- name: "Load OS-specific variables"
  ansible.builtin.include_vars:
    file: "{{ selected_image.os_type }}.yml"

- name: "Create instance"
  azure.azcollection.azure_rm_virtualmachine:
    resource_group: "{{ azure_resourcegroup_name }}"
    name: "{{ azure_instance_name }}"
    vm_size: "{{ azure_instance_size }}"
    virtual_network_name: "{{ azure_instance_network_name }}"
    subnet_name: "{{ azure_instance_subnet_name | default(omit) }}"
    os_type: "{{ selected_image.os_type | capitalize }}"
    admin_username: "{{ azure_instance_admin_username }}"
    append_tags: "{{ azure_instance_purge_tags }}"
    ssh_password_enabled: "{{ azure_instance_ssh_password_enabled }}"
    ssh_public_keys:
      - path: "/home/{{ azure_instance_admin_username }}/.ssh/authorized_keys"
        key_data: "{{ azure_instance_pubkey }}"
    state: present
    image:
      offer: "{{ selected_image.offer }}"
      publisher: "{{ selected_image.publisher }}"
      sku: "{{ selected_image.sku }}"
      version: "{{ selected_image.version }}"
    custom_data: "{{ lookup('template', 'user_data.sh.j2') }}"
  register: __azure_instance

- name: "Debug output"
  ansible.builtin.debug:
    var: __azure_instance
