---
- name: "Grab the ID of the VPC being operated on"
  amazon.aws.ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ vpc.name }}"
    region: "{{ aws_region }}"
  register: __vpc

- name: "Ensure a VPC has been found"
  ansible.builtin.assert:
    that:
      - __vpc.vpcs | length == 1
    success_msg: "Found {{ __vpc.vpcs | length }} VPC (id={{ __vpc.vpcs.0.id }})"
    fail_msg: "Did not find exactly 1 VPC. Bailing out."

- name: "Ensure subnet exists with desired configuration"
  amazon.aws.ec2_vpc_subnet:
    cidr: "{{ subnet.cidr_block }}"
    map_public: "{{ subnet.map_public }}"
    purge_tags: "{{ subnet.purge_tags }}"
    tags: "{{ __aws_net_default_tags | combine(subnet.tags) }}"
    vpc_id: "{{ __vpc.vpcs.0.id }}"
    region: "{{ aws_region }}"
    state: present
  loop: "{{ vpc.subnets }}"
  loop_control:
    loop_var: subnet

- name: "Ensure internet gateway exists when enabled"
  amazon.aws.ec2_vpc_igw:
    purge_tags: "{{ vpc.purge_tags }}"
    tags: "{{ __aws_net_default_tags }}"
    vpc_id: "{{ __vpc.vpcs.0.id }}"
    region: "{{ aws_region }}"
    state: present
  when: vpc.internet_gateway
